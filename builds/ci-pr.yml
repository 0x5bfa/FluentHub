trigger:
- pr

pool:
  vmImage: 'windows-latest'

variables:
- group: BuildPipelineVariables
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'x64'
- name: buildConfigurationDebug
  value: 'Debug'
- name: buildConfigurationRelease
  value: 'Release'
- name: buildConfigurationSideload
  value: 'Sideload'
- name: appxPackageDir
  value: '$(build.artifactStagingDirectory)\AppxPackages\\'

jobs:

# Debug
- job: BuildDebugx64
  displayName: Build Debug x64
  timeoutInMinutes: 120

  steps:
  - task: PowerShell@2
    displayName: 'Canonicalize package manifest'
    inputs:
      targetType: 'inline'
      script: |
        [xml]$xmlDoc = Get-Content $(Build.SourcesDirectory)\src\FluentHub.App\Package.appxmanifest
        $xmlDoc.Package.Identity.Name="49462fluenthub-uwp.FluentHub"
        $xmlDoc.Package.Identity.Publisher="CN=4E3C0825-4D00-4ECC-89F8-528E9200B125"
        $xmlDoc.Package.Properties.DisplayName="FluentHub"
        $xmlDoc.Package.Applications.Application.VisualElements.DisplayName="FluentHub"
        $xmlDoc.Save('$(Build.SourcesDirectory)\src\FluentHub.App\Package.appxmanifest')
      failOnStderr: true

  - task: PowerShell@2
    displayName: 'Use Release Logo'
    inputs:
      targetType: 'inline'
      script: |
        gci $(Build.SourcesDirectory)\src -Include *.csproj, *.appxmanifest, *.wapproj -recurse | ForEach -Process {
        (Get-Content $_ -Raw | ForEach -Process {$_ -replace "Assets\\AppTiles\\Dev", "Assets\AppTiles\Release"}) | Set-Content $_ -NoNewline
        }
      failOnStderr: true

  - task: DownloadSecureFile@1
    displayName: 'Download OAuth credentials'
    name: CredentialSecureFile
    inputs:
      secureFile: AppCredentials.config

  - task: CopyFiles@2
    displayName: 'Copy OAuth credentials'
    inputs:
      SourceFolder: '$(Agent.TempDirectory)'
      Contents: '$(CredentialSecureFile.secureFilePath)'
      TargetFolder: '$(Build.SourcesDirectory)\src\FluentHub.App'

  - task: DownloadSecureFile@1
    name: caCertificate
    displayName: 'Download CA certificate'
    inputs:
      secureFile: '$(signingCert.secureFilePath)'

  - task: UseDotNet@2
    inputs:
      packageType: sdk
      version: 6.0.400

  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'

  - task: VSBuild@1
    displayName: 'Build FluentHub'
    inputs:
      platform: 'x64'
      solution: '$(solution)'
      configuration: '$(buildConfigurationSideload)'
      msbuildArgs: '
      /p:GenerateAppxPackageOnBuild=True
      /p:AppxBundlePlatforms="$(buildPlatform)"
      /p:AppxPackageDir="$(appxPackageDir)"
      /p:AppxBundle=Never
      /p:UapAppxPackageBuildMode=SideloadOnly
      /p:PackageCertificateKeyFile="$(caCertificate.secureFilePath)"'

  - task: CopyFiles@2
    displayName: 'Copy generated artifacts'
    inputs:
      SourceFolder: '$(system.defaultworkingdirectory)'
      Contents: '**\bin\$(buildConfigurationSideload)\**'
      TargetFolder: '$(build.artifactstagingdirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifacts'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
      artifactName: 'Debug'

# Sideload
- job: BuildSideloadx64
  displayName: Build Sideload x64
  timeoutInMinutes: 120

  steps:
  - checkout: self
    submodules: true

  - task: PowerShell@2
    displayName: 'Canonicalize package manifest'
    inputs:
      targetType: 'inline'
      script: |
        [xml]$xmlDoc = Get-Content $(Build.SourcesDirectory)\src\FluentHub.App\Package.appxmanifest
        $xmlDoc.Package.Identity.Name="FluentHubSideload"
        $xmlDoc.Package.Identity.Publisher="FluentHub"
        $xmlDoc.Package.Properties.DisplayName="FluentHub"
        $xmlDoc.Package.Applications.Application.VisualElements.DisplayName="FluentHub"
        $xmlDoc.Save('$(Build.SourcesDirectory)\src\FluentHub.App\Package.appxmanifest')
      failOnStderr: true

  - task: PowerShell@2
    displayName: 'Use Release Logo'
    inputs:
      targetType: 'inline'
      script: |
        gci $(Build.SourcesDirectory)\src -Include *.csproj, *.appxmanifest, *.wapproj -recurse | ForEach -Process {
        (Get-Content $_ -Raw | ForEach -Process {$_ -replace "Assets\\AppTiles\\Dev", "Assets\AppTiles\Release"}) | Set-Content $_ -NoNewline
        }
      failOnStderr: true

  - task: DownloadSecureFile@1
    displayName: 'Download OAuth credentials'
    name: CredentialSecureFile
    inputs:
      secureFile: AppCredentials.config

  - task: CopyFiles@2
    displayName: 'Copy OAuth credentials'
    inputs:
      SourceFolder: '$(Agent.TempDirectory)'
      Contents: '$(CredentialSecureFile.secureFilePath)'
      TargetFolder: '$(Build.SourcesDirectory)\src\FluentHub.App'

  - task: DownloadSecureFile@1
    name: caCertificate
    displayName: 'Download CA certificate'
    inputs:
      secureFile: '$(signingCert.secureFilePath)'

  - task: UseDotNet@2
    inputs:
      packageType: sdk
      version: 6.0.400

  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'

  - task: VSBuild@1
    displayName: 'Build FluentHub'
    inputs:
      platform: 'x64'
      solution: '$(solution)'
      configuration: '$(buildConfigurationSideload)'
      msbuildArguments: '
      /p:GenerateAppxPackageOnBuild=true
      /p:AppInstallerUri="$(build.artifactstagingdirectory)"
      /p:AppxBundlePlatforms="$(buildPlatform)"
      /p:AppxPackageDir="$(appxPackageDir)"
      /p:UapAppxPackageBuildMode=Sideload
      /p:AppxBundle=Always
      /p:AppxPackageSigningEnabled=True
      /p:PackageCertificateThumbprint=""
      /p:PackageCertificateKeyFile="$(caCertificate.secureFilePath)"
      /p:PackageCertificatePassword="$(signingCert.password)"'

  - task: CopyFiles@2
    displayName: 'Copy generated artifacts'
    inputs:
      SourceFolder: '$(system.defaultworkingdirectory)'
      Contents: '**\bin\$(buildConfigurationSideload)\**'
      TargetFolder: '$(build.artifactstagingdirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifacts'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
      artifactName: 'Sideload'

# StoreUpload
- job: BuildStoreUploadx64
  displayName: Build StoreUpload x64
  timeoutInMinutes: 120

  steps:
  - checkout: self
    submodules: true

  - task: PowerShell@2
    displayName: 'Canonicalize package manifest'
    inputs:
      targetType: 'inline'
      script: |
        [xml]$xmlDoc = Get-Content $(Build.SourcesDirectory)\src\FluentHub.App\Package.appxmanifest
        $xmlDoc.Package.Identity.Name="49462fluenthub-uwp.FluentHub"
        $xmlDoc.Package.Identity.Publisher="CN=4E3C0825-4D00-4ECC-89F8-528E9200B125"
        $xmlDoc.Package.Properties.DisplayName="FluentHub"
        $xmlDoc.Package.Applications.Application.VisualElements.DisplayName="FluentHub"
        $xmlDoc.Save('$(Build.SourcesDirectory)\src\FluentHub.App\Package.appxmanifest')
      failOnStderr: true

  - task: PowerShell@2
    displayName: 'Use Release Logo'
    inputs:
      targetType: 'inline'
      script: |
        gci $(Build.SourcesDirectory)\src -Include *.csproj, *.appxmanifest, *.wapproj -recurse | ForEach -Process {
        (Get-Content $_ -Raw | ForEach -Process {$_ -replace "Assets\\AppTiles\\Dev", "Assets\AppTiles\Release"}) | Set-Content $_ -NoNewline
        }
      failOnStderr: true

  - task: DownloadSecureFile@1
    displayName: 'Download OAuth credentials'
    name: CredentialSecureFile
    inputs:
      secureFile: AppCredentials.config

  - task: CopyFiles@2
    displayName: 'Copy OAuth credentials'
    inputs:
      SourceFolder: '$(Agent.TempDirectory)'
      Contents: '$(CredentialSecureFile.secureFilePath)'
      TargetFolder: '$(Build.SourcesDirectory)\src\FluentHub.App'

  - task: DownloadSecureFile@1
    name: caCertificate
    displayName: 'Download CA certificate'
    inputs:
      secureFile: '$(signingCert.secureFilePath)'

  - task: UseDotNet@2
    inputs:
      packageType: sdk
      version: 6.0.400

  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'

  - task: VSBuild@1
    displayName: 'Build FluentHub'
    inputs:
      platform: 'x64'
      solution: '$(solution)'
      configuration: '$(buildConfigurationRelease)'
      msbuildArguments: '
      /p:GenerateAppxPackageOnBuild=True
      /p:AppInstallerUri="$(build.artifactstagingdirectory)"
      /p:AppxBundlePlatforms="$(buildPlatform)"
      /p:AppxPackageDir="$(appxPackageDir)"
      /p:UapAppxPackageBuildMode=StoreUpload'

  - task: CopyFiles@2
    displayName: 'Copy generated artifacts'
    inputs:
      SourceFolder: '$(system.defaultworkingdirectory)'
      Contents: '**\bin\$(buildConfigurationRelease)\**'
      TargetFolder: '$(build.artifactstagingdirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifacts'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
      artifactName: 'StoreUpload'
