parameters:
  configuration: 'Debug'
  branding: 'Dev'
  platform: 'x64'
  identityName: 'FluentHubCI'
  identityPublisher: 'CN=FluentHubCI'
  displayName: 'FluentHub'
  visualDisplayName: 'FluentHub'
  
variables:
- group: BuildPipelineVariables
- name: solution
  value: '**/*.sln'
- name: appxPackageDir
  value: '$(build.artifactStagingDirectory)\AppxPackages\\'

steps:
    
- checkout: self
  submodules: true
  clean: true
  fetchDepth: 1

- task: PowerShell@2
  displayName: 'Canonicalize package manifest'
  inputs:
    targetType: 'inline'
    script: |
      [xml]$xmlDoc = Get-Content $(Build.SourcesDirectory)\src\FluentHub.Uwp\Package.appxmanifest
      $xmlDoc.Package.Identity.Name="${{ parameters.identityName }}"
      $xmlDoc.Package.Identity.Publisher="${{ parameters.identityPublisher }}"
      $xmlDoc.Package.Properties.DisplayName="${{ parameters.displayName }}"
      $xmlDoc.Package.Applications.Application.VisualElements.DisplayName="${{ parameters.visualDisplayName }}"
      $xmlDoc.Save('$(Build.SourcesDirectory)\src\FluentHub.Uwp\Package.appxmanifest')
    failOnStderr: true

- task: DownloadSecureFile@1
  displayName: 'Download OAuth credentials'
  name: CredentialSecureFile
  inputs:
    secureFile: AppCredentials.config

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Agent.TempDirectory)'
    Contents: '$(CredentialSecureFile.secureFilePath)'
    TargetFolder: '$(Build.SourcesDirectory)\src\FluentHub.Uwp'

- task: DownloadSecureFile@1
  name: caCertificate
  displayName: 'Download CA certificate'
  inputs:
    secureFile: '$(signingCert.secureFilePath)'

- task: NuGetToolInstaller@1
  inputs:
    versionSpec: '6.2.1'

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

  variables:
  ${{ if eq(parameters.configuration, 'Debug') }}:
    msBuildArgs: '
      /p:GenerateAppInstallerFile=True
      /p:AppxLogTelemetryFromSideloadingScript=False
      /p:AppInstallerUri=$(build.artifactstagingdirectory)
      /p:AppxBundlePlatforms="$(buildPlatform)"
      /p:AppxPackageDir="$(appxPackageDir)"
      /p:AppxBundle=Always
      /p:UapAppxPackageBuildMode=${{ parameters.configuration }}
      /p:AppxPackageSigningEnabled=true
      /p:PackageCertificateThumbprint=""
      /p:PackageCertificateKeyFile="$(caCertificate.secureFilePath)"
      /p:PackageCertificatePassword="$(signingCert.password)"'
  ${{ elseif eq(parameters.configuration, 'Sideload') }}:
    msBuildArgs: '
      /p:AppInstallerUri="$(build.artifactstagingdirectory)"
      /p:AppxBundlePlatforms="$(buildPlatform)"
      /p:AppxPackageDir="$(appxPackageDir)"
      /p:UapAppxPackageBuildMode=${{ parameters.configuration }}
      /p:AppxPackageSigningEnabled=true
      /p:PackageCertificateThumbprint=""
      /p:PackageCertificateKeyFile="$(caCertificate.secureFilePath)"
      /p:PackageCertificatePassword="$(signingCert.password)"'
  ${{ elseif eq(parameters.configuration, 'Sideload') }}:
    msBuildArgs: '
      /p:AppInstallerUri="$(build.artifactstagingdirectory)"
      /p:AppxBundlePlatforms="$(buildPlatform)"
      /p:AppxPackageDir="$(appxPackageDir)"
      /p:UapAppxPackageBuildMode=${{ parameters.configuration }}'

- task: VSBuild@1
  displayName: 'Build FluentHub'
  inputs:
    platform: '${{ parameters.platform }}'
    solution: '$(solution)'
    configuration: '${{ parameters.configuration }}'
    msbuildArgs: '$(msBuildArgs)'

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**\bin\$(buildConfigurationSideload)\**'
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
    artifactName: 'Assets'
