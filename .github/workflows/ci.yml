# Copyright (c) 2024 0x5BFA
# Licensed under the MIT License. See the LICENSE.

name: FluentHub CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'assets/**'
      - 'builds/**'
      - 'docs/**'
      - '*.md'
  pull_request:
    paths-ignore:
      - 'assets/**'
      - 'builds/**'
      - 'docs/**'
      - '*.md'

run-name: ${{ github.event_name == 'pull_request' && 'FluentHub PR Validation' || 'FluentHub CI Validation' }}

env:
  WORKING_DIR: ${{ github.workspace }} # Default: 'D:\a\FluentHub\FluentHub'
  SOLUTION_PATH: '${{ github.workspace }}\FluentHub.sln'
  PACKAGE_PROJECT_DIR: '${{ github.workspace }}\src\FluentHub.Package'
  PACKAGE_PROJECT_PATH: '${{ github.workspace }}\src\FluentHub.Package\FluentHub.Package.wapproj'
  AUTOMATED_TESTS_ARCHITECTURE: 'x64'
  AUTOMATED_TESTS_CONFIGURATION: 'Release'
  ARTIFACTS_STAGING_DIR:  '${{ github.workspace }}\artifacts'
  APPX_PACKAGE_DIR: '${{ github.workspace }}\artifacts\AppxPackages'

jobs:

  check-formatting:

    if: github.repository_owner == '0x5bfa'

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh

    steps:

    - name: Checkout the repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Install XamlStyler console
      run: 'dotnet tool install --global XamlStyler.Console'

    - name: Check XAML formatting
      id: check-step
      run: |
        $changedFiles = (git diff --diff-filter=d --name-only HEAD~1) -split "\n" | Where-Object {$_ -like "*.xaml"}
        foreach ($file in $changedFiles)
        {
          xstyler -p -l None -f $file
          if ($LASTEXITCODE -ne 0)
          {
            echo "::error file=$file::Format check failed"
          }
        }
      continue-on-error: true
    
    - name: Fail if necessary
      if: steps.check-step.outcome == 'failure'
      run: exit 1

  build:

    if: github.repository_owner == '0x5bfa'

    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        configuration: [Debug, Release]
        platform: [x64, arm64]
    env:
      CONFIGURATION: ${{ matrix.configuration }}
      ARCHITECTURE: ${{ matrix.platform }}

    steps:

    - name: Checkout the repository
      uses: actions/checkout@v3

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.1.1

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore NuGet
      shell: pwsh
      run: 'nuget restore $env:SOLUTION_PATH'

    - name: Restore FluentHub
      shell: pwsh
      run: |
        msbuild $env:SOLUTION_PATH `
          -t:Restore `
          -p:Platform=$env:ARCHITECTURE `
          -p:Configuration=$env:CONFIGURATION `
          -p:PublishReadyToRun=true

    - name: Build FluentHub
      run: |
        msbuild `
          $env:PACKAGE_PROJECT_PATH `
          -t:Build `
          -clp:ErrorsOnly `
          -p:Configuration=$env:CONFIGURATION `
          -p:Platform=$env:ARCHITECTURE `
          -p:AppxBundle=Never

    - name: Upload the packages to the Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: 'Appx Packages (${{ env.CONFIGURATION }}, ${{ env.ARCHITECTURE }})'
        path: ${{ env.ARTIFACTS_STAGING_DIR }}
