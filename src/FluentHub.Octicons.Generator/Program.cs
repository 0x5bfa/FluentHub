using Humanizer;
using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml;

namespace FluentHub.Octicons.Generator
{
	// Convert svg files into a XAML resource dictionary file
	// Assets icons version is 19.5.0 from https://github.com/primer/octicons
	public class Program
	{
		static void Main(string[] args)
		{
			string basePath = AppDomain.CurrentDomain.BaseDirectory;
			string assetsPath = Path.Combine(basePath, "..\\..\\..\\..\\FluentHub.Octicons.Generator\\Assets\\");
			string stylesOutputPath = Path.Combine(basePath, "..\\..\\..\\..\\FluentHub.App\\Styles\\");
			string enumsOutputPath = Path.Combine(basePath, "..\\..\\..\\..\\FluentHub.Core\\Data\\Enums\\");

			if (!Directory.Exists(assetsPath))
			{
				Console.WriteLine($"Assets directory not found. ({assetsPath})");
				return;
			}

			GenerateCSharpEnumEntities(assetsPath, enumsOutputPath);
			GenerateXamlEntities(assetsPath, stylesOutputPath);
		}

		private static void GenerateXamlEntities(string path, string output)
		{
			StringBuilder xamlTemplateBegining = new();
			xamlTemplateBegining.AppendLine(@$"ï»¿<!--  Copyright (c) 2022-2024 0x5BFA. Licensed under the MIT License. See the LICENSE.  -->");
			xamlTemplateBegining.AppendLine(@$"<!--");
			xamlTemplateBegining.AppendLine(@$"	This code was generated by a tool.");
			xamlTemplateBegining.AppendLine(@$"	Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.");
			xamlTemplateBegining.AppendLine(@$"-->");
			xamlTemplateBegining.AppendLine(@$"<ResourceDictionary");
			xamlTemplateBegining.AppendLine(@$"	xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""");
			xamlTemplateBegining.AppendLine(@$"	xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""");
			xamlTemplateBegining.AppendLine(@$"	xmlns:primer=""using:FluentHub.App.UserControls.PrimerControls"">");
			xamlTemplateBegining.AppendLine(@$"	<ResourceDictionary.MergedDictionaries>");
			xamlTemplateBegining.AppendLine(@$"		<ResourceDictionary>");

			foreach (var svgFile in Directory.EnumerateFiles(path, "*.svg"))
			{
				Console.WriteLine($"Converting {Path.GetFileNameWithoutExtension(svgFile)} into ColorIcon{NormalizeFileName(svgFile)}");

				var convertedStr = ConvertSvgEntity(svgFile);

				xamlTemplateBegining.Append(convertedStr);
			}

			xamlTemplateBegining.AppendLine(@$"");
			xamlTemplateBegining.AppendLine(@$"		</ResourceDictionary>");
			xamlTemplateBegining.AppendLine(@$"	</ResourceDictionary.MergedDictionaries>");
			xamlTemplateBegining.AppendLine(@$"</ResourceDictionary>");

			var value = xamlTemplateBegining.ToString();

			Directory.CreateDirectory(output);
			File.WriteAllText(Path.Combine(output, "OcticonIcons.xaml"), value);
		}

		private static void GenerateCSharpEnumEntities(string path, string output)
		{
			StringBuilder stringBuilder = new();
			stringBuilder.AppendLine(@$"// Copyright (c) 0x5BFA");
			stringBuilder.AppendLine(@$"// Licensed under the MIT License. See the LICENSE.");
			stringBuilder.AppendLine(@$"");
			stringBuilder.AppendLine(@$"//------------------------------------------------------------------------------");
			stringBuilder.AppendLine(@$"// <auto-generated>");
			stringBuilder.AppendLine(@$"//     This code was generated by a tool.");
			stringBuilder.AppendLine(@$"//");
			stringBuilder.AppendLine(@$"//     Changes to this file may cause incorrect behavior and will be lost if");
			stringBuilder.AppendLine(@$"//     the code is regenerated.");
			stringBuilder.AppendLine(@$"// </auto-generated>");
			stringBuilder.AppendLine(@$"//------------------------------------------------------------------------------");
			stringBuilder.AppendLine(@$"");
			stringBuilder.AppendLine(@$"namespace FluentHub.Core.Data.Enums");
			stringBuilder.AppendLine(@$"{{");
			stringBuilder.AppendLine(@$"	public enum OcticonKind");
			stringBuilder.AppendLine(@$"	{{");

			foreach (var svgFile in Directory.EnumerateFiles(path, "*.svg"))
			{
				stringBuilder.AppendLine(@$"		Octicon{NormalizeFileName(svgFile)},");
			}

			stringBuilder.AppendLine(@$"	}}");
			stringBuilder.AppendLine(@$"}}");

			var value = stringBuilder.ToString();

			Directory.CreateDirectory(output);
			File.WriteAllText(Path.Combine(output, "OcticonKind.cs"), value);
		}

		private static string ConvertSvgEntity(string path)
		{
			XmlDocument doc = new();
			doc.Load(path);

			var svgElement = doc.DocumentElement;
			if (svgElement == null)
			{
				throw new InvalidOperationException($"Invalid SVG file: {path}");
			}

			var pathElements = svgElement.GetElementsByTagName("path");
			if (pathElements.Count == 0)
			{
				throw new InvalidOperationException($"No path elements found in SVG file: {path}");
			}

			StringBuilder pathDataBuilder = new();
			foreach (XmlNode pathElement in pathElements)
			{
				var dAttribute = pathElement.Attributes["d"];
				if (dAttribute == null)
				{
					throw new InvalidOperationException($"No 'd' attribute found in path element of SVG file: {path}");
				}
				pathDataBuilder.AppendLine(@$"									<Path Data=""{dAttribute.Value}"" Fill=""{{TemplateBinding Foreground}}"" />");
			}

			var normalizedFileName = NormalizeFileName(path);
			var iconSize = GetIconSize(normalizedFileName);

			StringBuilder svgXamlTemplate = new();

			svgXamlTemplate.AppendLine(@$"");
			svgXamlTemplate.AppendLine(@$"			<Style x:Key=""Octicon{normalizedFileName}"" TargetType=""primer:Octicon"">");
			svgXamlTemplate.AppendLine(@$"				<Setter Property=""Template"">");
			svgXamlTemplate.AppendLine(@$"					<Setter.Value>");
			svgXamlTemplate.AppendLine(@$"						<ControlTemplate>");
			svgXamlTemplate.AppendLine(@$"							<Viewbox");
			svgXamlTemplate.AppendLine(@$"								Width=""{iconSize}""");
			svgXamlTemplate.AppendLine(@$"								Height=""{iconSize}""");
			svgXamlTemplate.AppendLine(@$"								Stretch=""Uniform"">");
			svgXamlTemplate.AppendLine(@$"								<Canvas Width=""{iconSize}"" Height=""{iconSize}"">");
			svgXamlTemplate.Append(pathDataBuilder);
			svgXamlTemplate.AppendLine(@$"								</Canvas>");
			svgXamlTemplate.AppendLine(@$"							</Viewbox>");
			svgXamlTemplate.AppendLine(@$"						</ControlTemplate>");
			svgXamlTemplate.AppendLine(@$"					</Setter.Value>");
			svgXamlTemplate.AppendLine(@$"				</Setter>");
			svgXamlTemplate.AppendLine(@$"			</Style>");

			return svgXamlTemplate.ToString();
		}

		private static string NormalizeFileName(string path)
		{
			string fileName = Path.GetFileNameWithoutExtension(path);
			string str = fileName.Replace('-', '_');
			return str.Pascalize();
		}

		private static int GetIconSize(string fileName)
		{
			var parts = fileName.Split('-');
			if (parts.Length > 1 && int.TryParse(parts.Last(), out int size))
			{
				return size;
			}
			return 16; // Default size if not specified
		}
	}
}
