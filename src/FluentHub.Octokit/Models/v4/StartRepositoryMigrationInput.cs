// Copyright (c) 2022-2024 0x5BFA
// Licensed under the MIT License. See the LICENSE.

namespace FluentHub.Octokit.Models.v4
{
	/// <summary>
	/// Autogenerated input type of StartRepositoryMigration
	/// </summary>
	public class StartRepositoryMigrationInput
	{
		/// <summary>
		/// A unique identifier for the client performing the mutation.
		/// </summary>
		public string ClientMutationId { get; set; }

		/// <summary>
		/// The ID of the migration source.
		/// </summary>
		public ID SourceId { get; set; }

		/// <summary>
		/// The ID of the organization that will own the imported repository.
		/// </summary>
		public ID OwnerId { get; set; }

		/// <summary>
		/// The URL of the source repository.
		/// </summary>
		public string SourceRepositoryUrl { get; set; }

		/// <summary>
		/// The name of the imported repository.
		/// </summary>
		public string RepositoryName { get; set; }

		/// <summary>
		/// Whether to continue the migration on error. Defaults to `true`.
		/// </summary>
		public bool? ContinueOnError { get; set; }

		/// <summary>
		/// The signed URL to access the user-uploaded git archive.
		/// </summary>
		public string GitArchiveUrl { get; set; }

		/// <summary>
		/// The signed URL to access the user-uploaded metadata archive.
		/// </summary>
		public string MetadataArchiveUrl { get; set; }

		/// <summary>
		/// The migration source access token.
		/// </summary>
		public string AccessToken { get; set; }

		/// <summary>
		/// The GitHub personal access token of the user importing to the target repository.
		/// </summary>
		public string GithubPat { get; set; }

		/// <summary>
		/// Whether to skip migrating releases for the repository.
		/// </summary>
		public bool? SkipReleases { get; set; }

		/// <summary>
		/// The visibility of the imported repository.
		/// </summary>
		public string TargetRepoVisibility { get; set; }

		/// <summary>
		/// Whether to lock the source repository.
		/// </summary>
		public bool? LockSource { get; set; }
	}
}
